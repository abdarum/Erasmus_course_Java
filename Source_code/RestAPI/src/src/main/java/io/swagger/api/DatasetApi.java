/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Author;
import io.swagger.model.BookGenre;
import io.swagger.model.BorrowPeriod;
import io.swagger.model.BorrowPlace;
import io.swagger.model.CoverType;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-01-10T16:58:49.916Z")

@Api(value = "dataset", description = "the dataset API")
@RequestMapping(value = "")
public interface DatasetApi {

    @ApiOperation(value = "Get authors dataset", nickname = "getDatasetAuthors", notes = "Get authors dataset", response = Author.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "dataset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Author.class, responseContainer = "List") })
    @RequestMapping(value = "/dataset/author",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Author>> getDatasetAuthors(@ApiParam(value = "The id of the author. If not entered then all authors are listed") @Valid @RequestParam(value = "id", required = false) Long id);


    @ApiOperation(value = "Get book genre dataset", nickname = "getDatasetBookGenre", notes = "Get book genre dataset", response = BookGenre.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "dataset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BookGenre.class, responseContainer = "List") })
    @RequestMapping(value = "/dataset/bookGenre",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BookGenre>> getDatasetBookGenre(@ApiParam(value = "The id of the book genre. If not entered then all book genre are listed") @Valid @RequestParam(value = "id", required = false) Long id);


    @ApiOperation(value = "Get borrow period dataset", nickname = "getDatasetBorrowPeriod", notes = "Get borrow period dataset", response = BorrowPeriod.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "dataset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BorrowPeriod.class, responseContainer = "List") })
    @RequestMapping(value = "/dataset/borrowPeriod",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BorrowPeriod>> getDatasetBorrowPeriod(@ApiParam(value = "The id of the borrow period. If not entered then all borrow period are listed") @Valid @RequestParam(value = "id", required = false) Long id);


    @ApiOperation(value = "Get borrow place dataset", nickname = "getDatasetBorrowPlace", notes = "Get borrow place dataset", response = BorrowPlace.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "dataset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BorrowPlace.class, responseContainer = "List") })
    @RequestMapping(value = "/dataset/borrowPlace",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BorrowPlace>> getDatasetBorrowPlace(@ApiParam(value = "The id of the borrow place. If not entered then all borrow place are listed") @Valid @RequestParam(value = "id", required = false) Long id);


    @ApiOperation(value = "Get cover type dataset", nickname = "getDatasetCoverType", notes = "Get cover type dataset", response = CoverType.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "dataset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CoverType.class, responseContainer = "List") })
    @RequestMapping(value = "/dataset/coverType",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CoverType>> getDatasetCoverType(@ApiParam(value = "The id of the cover type. If not entered then all cover types are listed") @Valid @RequestParam(value = "id", required = false) Long id);

}
