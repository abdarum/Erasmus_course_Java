/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Borrowed;
import io.swagger.model.LibraryBooksReport;
import io.swagger.model.NotificationForm;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;
import org.springframework.http.MediaType;
import io.swagger.model.SubmitUserReport;
import io.swagger.model.UserStatusReport;
import io.swagger.model.UsersRatingReport;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-12-09T16:01:46.842Z")

@Api(value = "library", description = "the library API")
@RequestMapping(value = "")
public interface LibraryApi {

    @ApiOperation(value = "Delete purchase order by ID", nickname = "deleteOrder", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized, no access"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/library/order/{orderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrder(@ApiParam(value = "ID of the order that needs to be deleted",required=true) @PathVariable("orderId") Long orderId,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "Get orders", nickname = "getAllOrders", notes = "Librarian get all orders, Reader takes only owned orders", response = Borrowed.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Borrowed.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/library/order",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Borrowed>> getAllOrders(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "Returns library books", nickname = "getLibraryInventoryBooks", notes = "Returns a stats of the library inventory", response = LibraryBooksReport.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = LibraryBooksReport.class),
        @ApiResponse(code = 401, message = "Unauthorized, no access") })
    @RequestMapping(value = "/library/inventory/books",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<LibraryBooksReport> getLibraryInventoryBooks(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "Returns library submitted users", nickname = "getLibraryInventorySubmittedUsers", notes = "Returns a stats of the library submitted users", response = SubmitUserReport.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SubmitUserReport.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized, no access") })
    @RequestMapping(value = "/library/inventory/submitted",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<SubmitUserReport>> getLibraryInventorySubmittedUsers(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "Returns library users", nickname = "getLibraryInventoryUsers", notes = "Returns a stats of the library users", response = UserStatusReport.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserStatusReport.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized, no access") })
    @RequestMapping(value = "/library/inventory/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserStatusReport>> getLibraryInventoryUsers(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "Returns library users rating", nickname = "getLibraryInventoryUsersRating", notes = "Returns a stats of the library users rating", response = UsersRatingReport.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UsersRatingReport.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized, no access") })
    @RequestMapping(value = "/library/inventory/userrating",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UsersRatingReport>> getLibraryInventoryUsersRating(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token);

    @ApiOperation(value = "Get notyfications", nickname = "notifyBook", notes = "")
    @RequestMapping(value = "/library/notify",
        method = RequestMethod.GET,
        produces = MediaType.TEXT_EVENT_STREAM_VALUE)
        SseEmitter notifyBook(
);

    @ApiOperation(value = "Returns notyfications of library", nickname = "getLibraryNotyfications", notes = "Returns notyfications of library", response = NotificationForm.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = NotificationForm.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized, no access") })
    @RequestMapping(value = "/library/notyfication",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<NotificationForm>> getLibraryNotyfications(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "Find book order by ID", nickname = "getOrderById", notes = "", response = Borrowed.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Borrowed.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized, no access"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/library/order/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Borrowed> getOrderById(@ApiParam(value = "ID of borrow form that needs to be fetched",required=true) @PathVariable("orderId") Long orderId,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "Place an order for a book rent", nickname = "placeOrder", notes = "", response = Borrowed.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Borrowed.class),
        @ApiResponse(code = 400, message = "Invalid Order"),
        @ApiResponse(code = 401, message = "Unauthorized, no access") })
    @RequestMapping(value = "/library/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Borrowed> placeOrder(@ApiParam(value = "order placed for borrow the book" ,required=true )  @Valid @RequestBody Borrowed body,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "Find purchase order by ID", nickname = "putOrderById", notes = "", response = Borrowed.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Borrowed.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized, no access"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/library/order/{orderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Borrowed> putOrderById(@ApiParam(value = "ID of pet that needs to be fetched",required=true) @PathVariable("orderId") Long orderId,@ApiParam(value = "form ot the borrowed book that needs to update" ,required=true )  @Valid @RequestBody Borrowed body,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token);

}
