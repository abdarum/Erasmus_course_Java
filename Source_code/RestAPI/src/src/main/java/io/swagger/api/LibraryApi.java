/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Borrowed;
import io.swagger.model.LibraryStats;
import io.swagger.model.NotificationForm;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;
import org.springframework.http.MediaType;
import io.swagger.annotations.*;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-11-15T16:11:11.651Z")

@Api(value = "library", description = "the library API")
@RequestMapping(value = "")
public interface LibraryApi {

    @ApiOperation(value = "Delete purchase order by ID", nickname = "deleteOrder", notes = "", tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/library/order/{orderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrder(@Min(1L)@ApiParam(value = "ID of the order that needs to be deleted",required=true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Returns library inventories by status", nickname = "getLibraryInventory", notes = "Returns a stats of the library inventory", response = LibraryStats.class, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = LibraryStats.class),
        @ApiResponse(code = 401, message = "Unauthorized, no access") })
    @RequestMapping(value = "/library/inventory",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<LibraryStats> getLibraryInventory();

    @ApiOperation(value = "Get notyfications", nickname = "notifyBook", notes = "")
    @RequestMapping(value = "/library/notify",
        method = RequestMethod.GET,
        produces = MediaType.TEXT_EVENT_STREAM_VALUE)
        SseEmitter notifyBook(
);

    @ApiOperation(value = "Returns notyfications of library", nickname = "getLibraryNotyfications", notes = "Returns notyfications of library", response = NotificationForm.class, responseContainer = "List", tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = NotificationForm.class, responseContainer = "List") })
    @RequestMapping(value = "/library/notyfication",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<NotificationForm>> getLibraryNotyfications();


    @ApiOperation(value = "Find book order by ID", nickname = "getOrderById", notes = "", response = Borrowed.class, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Borrowed.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/library/order/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Borrowed> getOrderById(@Min(1L) @Max(10L) @ApiParam(value = "ID of borrow form that needs to be fetched",required=true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Place an order for a book rent", nickname = "placeOrder", notes = "", response = Borrowed.class, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Borrowed.class),
        @ApiResponse(code = 400, message = "Invalid Order") })
    @RequestMapping(value = "/library/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Borrowed> placeOrder(@ApiParam(value = "order placed for borrow the book" ,required=true )  @Valid @RequestBody Borrowed body);


    @ApiOperation(value = "Find purchase order by ID", nickname = "putOrderById", notes = "", response = Borrowed.class, tags={ "library", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Borrowed.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/library/order/{orderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Borrowed> putOrderById(@Min(1L) @Max(10L) @ApiParam(value = "ID of pet that needs to be fetched",required=true) @PathVariable("orderId") Long orderId,@ApiParam(value = "form ot the borrowed book that needs to update" ,required=true )  @Valid @RequestBody Borrowed body);

}
