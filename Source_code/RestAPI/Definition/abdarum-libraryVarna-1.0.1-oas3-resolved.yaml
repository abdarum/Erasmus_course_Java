openapi: 3.0.0
info:
  description: Library API
  version: 1.0.1-oas3
  title: Library Varna
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: kornelstefanczyk@wp.pl
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: user
    description: Operations about user
  - name: book
    description: Everything about your Books
  - name: library
    description: Everything about Library
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        "403":
          description: >-
            Forbidden, current user has no permission to create new user of
            selected type
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

  "/user/{username}/stats":
    get:
      tags:
        - user
      summary: Get user statistics by user name
      operationId: getStatsByUsername
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStatus"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

  /book:
    post:
      tags:
        - book
      summary: Add a new book to the library
      operationId: addBook
      responses:
        "405":
          description: Invalid input
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
    put:
      tags:
        - book
      summary: Update an existing book
      operationId: updateBook
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
        "405":
          description: Validation exception
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"

  "/book/{id}":
    get:
      tags:
        - book
      summary: Get book by book id
      operationId: getBookById
      parameters:
        - name: id
          in: path
          description: The id that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid id supplied
        "404":
          description: Book not found
    put:
      tags:
        - book
      summary: Updated book
      description: This can only be done by the logged in user.
      operationId: updateBookById
      parameters:
        - name: id
          in: path
          description: id of book that need to be updated
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid id supplied
        "404":
          description: Book not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
    delete:
      tags:
        - book
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteBookById
      parameters:
        - name: id
          in: path
          description: The id of the book that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid id supplied
        "404":
          description: Book not found

  /book/findByStatus:
    get:
      tags:
        - book
      summary: Finds Books by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findBookByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - user
                - name
                - author
              default: available
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "400":
          description: Invalid status value
      security:
        - bearerAuth: []

  /library/inventory:
    get:
      tags:
        - library
      summary: Returns library inventories by status
      description: Returns a stats of the library inventory
      operationId: getLibraryInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LibraryStats"
      security:
        - bearerAuth: []

  # -------------------------------------------------

  /library/order:
    post:
      tags:
        - library
      summary: Place an order for a book rent
      operationId: placeOrder
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Borrowed"
        "400":
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Borrowed"
        description: order placed for borrow the book
        required: true

  "/library/order/{orderId}":
    get:
      tags:
        - library
      summary: Find book order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of borrow form that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Borrowed"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    put:
      tags:
        - library
      summary: Find purchase order by ID
      operationId: putOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Borrowed"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Borrowed"
        description: form ot the borrowed book that needs to update
        required: true
    delete:
      tags:
        - library
      summary: Delete purchase order by ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found

  /library/notyfication:
    get:
      tags:
        - library
      summary: Returns notyfications of library
      description: Returns notyfications of library
      operationId: getLibraryNotyfications

      responses:
        "200":
          description: successful operation
          content:
            text/event-stream:
              # content:

              schema:
                type: array
                format: chunked
                items:
                  type: object
                  format: text
                  $ref: "#/components/schemas/NotificationForm"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userTypeId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        birthdate:
          type: integer
          description: Timestamp in UTC
        registrated:
          type: integer
          description: Timestamp in UTC
        gender:
          type: string
        adress:
          type: string
        city:
          type: string
        status:
          type: string
          description: Order Status
          enum:
            - active
            - suspended
            - inactive
      xml:
        name: User
    UserType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        permissions:
          type: string
      xml:
        name: UserType
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userTypeId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        birthdate:
          type: integer
          description: Timestamp in UTC
        gender:
          type: string
        adress:
          type: string
        city:
          type: string
      xml:
        name: Author
    CoverType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: CoverType
    Borrowed:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        bookId:
          type: integer
          format: int64
        borrowedDate:
          type: integer
          description: Timestamp in UTC
        returnedDate:
          type: integer
          description: Timestamp in UTC
        damageNotes:
          type: string
        placeId:
          type: integer
          format: int64
        periodId:
          type: integer
          format: int64
      xml:
        name: Borrowed
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        isbn:
          type: integer
        authorId:
          type: integer
          format: int64
        pageCount:
          type: integer
        coverTypeId:
          type: integer
          format: int64
        genreId:
          type: integer
          format: int64
      xml:
        name: Book
    BookGenre:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: BookGenre
    BorrowPeriod:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        period:
          type: integer
      xml:
        name: BorrowPeriod
    BorrowPlace:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: BorrowPlace
    LibraryStats:
      type: object
      properties:
        numberOfBooks:
          type: integer
        numberOfAvailableBooks:
          type: integer
      xml:
        name: LibraryStats
    UserStatus:
      type: object
      properties:
        numberOfAllBorrowedBooks:
          type: integer
        numberOfAllDamagedBooks:
          type: integer
        numberOfCurrentBorrowedBooks:
          type: integer
        numberOfDelayedBooks:
          type: integer
      xml:
        name: UserStatus
    NotificationForm:
      type: object
      properties: # also possible to model with oneOf+discriminator
        id:
          type: integer
          description: my event id
        event:
          type: string
          description: my event type
        data:
          type: object # object in case we have a complex structure, otherwise string, integer, ..., as usual

      xml:
        name: UserStatus
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
servers:
  # - url: 'localhost:8080'
  - url: "http://localhost:8080"
