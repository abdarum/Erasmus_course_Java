---
openapi: "3.0.0"
info:
  title: "Library Varna"
  description: "Library API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "kornelstefanczyk@wp.pl"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  version: "1.0.1-oas3"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
servers:
- url: "/"
security:
- bearerAuth: []
tags:
- name: "user"
  description: "Operations about user"
- name: "book"
  description: "Everything about your Books"
- name: "library"
  description: "Everything about Library"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      requestBody:
        description: "Created user object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "403":
          description: "Forbidden, current user has no permission to create new user\
            \ of selected type"
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        style: "form"
        explode: true
        schema:
          type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        style: "form"
        explode: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              description: "calls per hour allowed by the user"
              style: "simple"
              explode: false
              schema:
                type: "integer"
                format: "int32"
            X-Expires-After:
              description: "date in UTC when token expires"
              style: "simple"
              explode: false
              schema:
                type: "string"
                format: "date-time"
          content:
            application/json:
              schema:
                type: "string"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      operationId: "logoutUser"
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      operationId: "getUserByName"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      requestBody:
        description: "Updated user object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/{username}/stats:
    get:
      tags:
      - "user"
      summary: "Get user statistics by user name"
      operationId: "getStatsByUsername"
      parameters:
      - name: "username"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStatus"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /book:
    put:
      tags:
      - "book"
      summary: "Update an existing book"
      operationId: "updateBook"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
        "405":
          description: "Validation exception"
      security:
      - bearerAuth: []
    post:
      tags:
      - "book"
      summary: "Add a new book to the library"
      operationId: "addBook"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "405":
          description: "Invalid input"
      security:
      - bearerAuth: []
  /book/{id}:
    get:
      tags:
      - "book"
      summary: "Get book by book id"
      operationId: "getBookById"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be fetched."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Book not found"
    put:
      tags:
      - "book"
      summary: "Updated book"
      description: "This can only be done by the logged in user."
      operationId: "updateBookById"
      parameters:
      - name: "id"
        in: "path"
        description: "id of book that need to be updated"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      requestBody:
        description: "Updated user object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Book not found"
    delete:
      tags:
      - "book"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteBookById"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the book that needs to be deleted"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Book not found"
  /book/findByStatus:
    get:
      tags:
      - "book"
      summary: "Finds Books by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findBookByStatus"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        style: "form"
        explode: true
        schema:
          type: "array"
          items:
            type: "string"
            enum:
            - "available"
            - "user"
            - "name"
            - "author"
            default: "available"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Book"
        "400":
          description: "Invalid status value"
      security:
      - bearerAuth: []
  /library/inventory:
    get:
      tags:
      - "library"
      summary: "Returns library inventories by status"
      description: "Returns a stats of the library inventory"
      operationId: "getLibraryInventory"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LibraryStats"
      security:
      - bearerAuth: []
  /library/order:
    post:
      tags:
      - "library"
      summary: "Place an order for a book rent"
      operationId: "placeOrder"
      requestBody:
        description: "order placed for borrow the book"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Borrowed"
        required: true
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Borrowed"
        "400":
          description: "Invalid Order"
  /library/order/{orderId}:
    get:
      tags:
      - "library"
      summary: "Find book order by ID"
      operationId: "getOrderById"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of borrow form that needs to be fetched"
        required: true
        style: "simple"
        explode: false
        schema:
          maximum: 1E+1
          minimum: 1
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Borrowed"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    put:
      tags:
      - "library"
      summary: "Find purchase order by ID"
      operationId: "putOrderById"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        style: "simple"
        explode: false
        schema:
          maximum: 1E+1
          minimum: 1
          type: "integer"
          format: "int64"
      requestBody:
        description: "form ot the borrowed book that needs to update"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Borrowed"
        required: true
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Borrowed"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "library"
      summary: "Delete purchase order by ID"
      operationId: "deleteOrder"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        style: "simple"
        explode: false
        schema:
          minimum: 1
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        userTypeId:
          type: "integer"
          format: "int64"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
        birthdate:
          type: "integer"
          description: "Timestamp in UTC"
        registrated:
          type: "integer"
          description: "Timestamp in UTC"
        gender:
          type: "string"
        adress:
          type: "string"
        city:
          type: "string"
        status:
          type: "string"
          description: "Order Status"
          enum:
          - "active"
          - "suspended"
          - "inactive"
      xml:
        name: "User"
    UserType:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        permissions:
          type: "string"
      xml:
        name: "UserType"
    Author:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        userTypeId:
          type: "integer"
          format: "int64"
        firstName:
          type: "string"
        lastName:
          type: "string"
        birthdate:
          type: "integer"
          description: "Timestamp in UTC"
        gender:
          type: "string"
        adress:
          type: "string"
        city:
          type: "string"
      xml:
        name: "Author"
    CoverType:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
      xml:
        name: "CoverType"
    Borrowed:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        userId:
          type: "integer"
          format: "int64"
        bookId:
          type: "integer"
          format: "int64"
        borrowedDate:
          type: "integer"
          description: "Timestamp in UTC"
        returnedDate:
          type: "integer"
          description: "Timestamp in UTC"
        damageNotes:
          type: "string"
        placeId:
          type: "integer"
          format: "int64"
        periodId:
          type: "integer"
          format: "int64"
      xml:
        name: "Borrowed"
    Book:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        isbn:
          type: "integer"
        authorId:
          type: "integer"
          format: "int64"
        pageCount:
          type: "integer"
        coverTypeId:
          type: "integer"
          format: "int64"
        genreId:
          type: "integer"
          format: "int64"
      xml:
        name: "Book"
    BookGenre:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
      xml:
        name: "BookGenre"
    BorrowPeriod:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        period:
          type: "integer"
      xml:
        name: "BorrowPeriod"
    BorrowPlace:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
      xml:
        name: "BorrowPlace"
    LibraryStats:
      type: "object"
      properties:
        numberOfBooks:
          type: "integer"
        numberOfAvailableBooks:
          type: "integer"
      xml:
        name: "LibraryStats"
    UserStatus:
      type: "object"
      properties:
        numberOfAllBorrowedBooks:
          type: "integer"
        numberOfAllDamagedBooks:
          type: "integer"
        numberOfCurrentBorrowedBooks:
          type: "integer"
        numberOfDelayedBooks:
          type: "integer"
      xml:
        name: "UserStatus"
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
